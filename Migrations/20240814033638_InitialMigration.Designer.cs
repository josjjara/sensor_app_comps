// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SensorApp.Data;

#nullable disable

namespace SensorApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240814033638_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SensorApp.Models.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abreviacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abreviacion");

                    b.Property<int>("CodigoParametro")
                        .HasColumnType("integer")
                        .HasColumnName("id_codigo");

                    b.Property<string>("DescripcionCorta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_corta");

                    b.Property<string>("DescripcionLarga")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_larga");

                    b.Property<string>("DescripcionMed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion_med");

                    b.Property<char>("Estado")
                        .HasColumnType("character(1)")
                        .HasColumnName("estado");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("observacion");

                    b.Property<string>("Unidad")
                        .HasColumnType("text")
                        .HasColumnName("unidad");

                    b.HasKey("Id");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("SensorApp.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoParametro")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_parametro");

                    b.Property<DateTime>("FechaDato")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_dato");

                    b.Property<string>("NombreParametro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_parametro");

                    b.Property<int>("ParametroSensoresId")
                        .HasColumnType("integer")
                        .HasColumnName("parametro_sensores_id");

                    b.Property<decimal>("ValorNumero")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_numero");

                    b.HasKey("Id");

                    b.HasIndex("ParametroSensoresId");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("SensorApp.Models.SensorData", b =>
                {
                    b.HasOne("SensorApp.Models.Parameter", "Parameter")
                        .WithMany("SensorDatas")
                        .HasForeignKey("ParametroSensoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("SensorApp.Models.Parameter", b =>
                {
                    b.Navigation("SensorDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
